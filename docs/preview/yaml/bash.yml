steps:
  # Run a Bash script on macOS, Linux, and Windows. bash must be in your PATH.
  - script: echo hello world
    name: Simple script

  # Multi-line script.
  - script: |
      echo hello from a...
      echo ...multi-line script
    name: Multi-line script

  # Working directory.
  - script: echo agent.homeDirectory is $PWD
    name: Working directory
    workingDirectory: $(agent.homeDirectory)

  # Fail on stderr. By default, text written to stderr does not fail your task. Programs commonly write progress
  # or other non-error information to stderr. Use the failOnStderr input to fail your task if text is written
  # to stderr.
  #
  # Note, we want to continue running the samples. Therefore, continueOnError is leveraged so the task result will be
  # SucceededWithIssues instead of Failed.
  - script: echo hello from stderr 1>&2
    name: Fail on stderr
    failOnStderr: true
    continueOnError: true
  #
  # Verify the job status is SucceededWithIssues now.
  - script: "echo agent.jobStatus is $AGENT_JOBSTATUS"
    name: "Print agent.jobStatus"

  # Environment variables. Use env to map secrets variables into the environment for your script.
  # Unless explicitly mapped, secret variables are not propagated to the environment of ad hoc scripts.
  #
  # First, create a secret variable. Normally these would be persisted securely by the definition.
  - script: "echo \"##vso[task.setvariable variable=MySecret;isSecret=true]My secret value\""
    name: Create secret variable
  #
  # Next, map the secret into an environment variable and print it. Note, secrets are masked in the log
  # and appear as '********'.
  - script: echo The password is $MyPassword
    name: Print secret variable
    env:
      MyPassword: $(MySecret)
  