steps:
  # Run a PowerShell script on Windows, macOS, and Linux. powershell must be in your PATH.
  - powershell: Write-Host "Hello from PowerShell v$($PSVersionTable.PSVersion.Major)"
    name: Simple script

  # Multi-line script.
  - powershell: |
      Write-Host "Hello from a..."
      Write-Host "...multi-line PowerShell script"
    name: Multi-line script

  # Error action preference. Unless specified, the task defaults the error action preference
  # to Stop. The line "$ErrorActionPreference = 'VALUE'" is prepended to the top of your script.
  #
  # When the error action preference is set to Stop, errors will be treated as terminating and
  # powershell will return a non-zero exit code (task result will be Failed).
  #
  # Valid values are: Stop, Continue, SilentlyContinue
  - powershell: |
      Write-Error 'Uh oh, an error occurred'
      Write-Host 'Trying again...'
    name: Error action preference
    errorActionPreference: Continue

  # Fail on stderr. If true, the task will fail if any errors are written to the error pipeline,
  # or if any data is written to the Standard Error stream. Otherwise the task will rely on the
  # exit code to determine failure.
  #
  # Note, we want to continue running the samples. Therefore, continueOnError is leveraged so the
  # task result will be SucceededWithIssues instead of Failed.
  - powershell: Write-Error 'Uh oh, an error occurred'
    name: Fail on stderr
    errorActionPreference: Continue
    failOnStderr: true
    continueOnError: true
  #
  # Verify the job status is SucceededWithIssues now.
  - powershell: Write-Host "agent.jobStatus is $env:AGENT_JOBSTATUS"
    name: "Print agent.jobStatus"

  # Ignore $LASTEXITCODE. If false, the line "if ((Test-Path -LiteralPath variable:\\LASTEXITCODE)) { exit $LASTEXITCODE }" is appended to the end of your script. This will cause the last exit code from an external command to be propagated as the exit code of powershell. Otherwise the line is not appended to the end of your script.
  - powershell: git nosuchcommand
    name: Ignore last exit code
    ignoreLASTEXITCODE: true

  # Working directory.
  - powershell: |
      Write-Host "agent.homeDirectory is:"
      Get-Location
    name: Working directory
    workingDirectory: $(agent.homeDirectory)

  # Environment variables. Use env to map secrets variables into the environment for your script.
  # Unless explicitly mapped, secret variables are not propagated to the environment of ad hoc scripts.
  #
  # First, create a secret variable. Normally these would be persisted securely by the definition.
  - powershell: "Write-Host '##vso[task.setvariable variable=MySecret;isSecret=true]My secret value'"
    name: Create secret variable
  #
  # Next, map the secret into an environment variable and print it. Note, secrets are masked in the log
  # and appear as '********'.
  - powershell: Write-Host "The password is $env:MyPassword"
    name: Print secret variable
    env:
      MyPassword: $(MySecret)
  